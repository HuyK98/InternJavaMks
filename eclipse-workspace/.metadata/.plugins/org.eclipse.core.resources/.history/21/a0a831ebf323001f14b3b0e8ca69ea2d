package com.bezkoder.spring.thymeleaf.image.upload.controller;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.List;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.io.Resource;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilder;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.bezkoder.spring.thymeleaf.image.upload.model.ImageInfo;
import com.bezkoder.spring.thymeleaf.image.upload.service.FilesStorageService;

@Controller
public class ImageController {

    @Autowired
    FilesStorageService storageService;

  @GetMapping("/")
  public String homepage() {
    return "redirect:/images";
  }

  @GetMapping("/images/new")
  public String newFile(Model model) {
    List<String> directories = storageService.loadAllDirectories();
    model.addAttribute("directories", directories);
    return "upload_form";
  }

  @PostMapping("/files/upload")
  public String uploadFile(Model model, @RequestParam("file") MultipartFile file, @RequestParam("directory") String directory) {
    String message = "";

    try {
      storageService.save(file, directory);
      message = "Uploaded the file successfully: " + file.getOriginalFilename();
      model.addAttribute("message", message);
    } catch (Exception e) {
      message = "Could not upload the file: " + file.getOriginalFilename() + ". Error: " + e.getMessage();
      model.addAttribute("message", message);
    }

    List<String> directories = storageService.loadAllDirectories();
    model.addAttribute("directories", directories);
    return "upload_form";
  }

  @GetMapping("/images")
  public String getListFiles(Model model) {
    List<ImageInfo> fileInfos = storageService.loadAll().map(path -> {
      String filename = path.getFileName().toString();
      String url = MvcUriComponentsBuilder
          .fromMethodName(ImageController.class, "getFile", path.getFileName().toString()).build().toString();
      String type = getFileType(path);
      return new ImageInfo(filename, url, type);
    }).collect(Collectors.toList());

    model.addAttribute("files", fileInfos);
    model.addAttribute("filter", "all");

    return "files";
  }

  @GetMapping("/images/filter")
  public String getImages(Model model) {
    List<ImageInfo> fileInfos = storageService.loadAll().filter(path -> getFileType(path).equals("image")).map(path -> {
      String filename = path.getFileName().toString();
      String url = MvcUriComponentsBuilder
          .fromMethodName(ImageController.class, "getFile", path.getFileName().toString()).build().toString();
      return new ImageInfo(filename, url, "image");
    }).collect(Collectors.toList());

    model.addAttribute("files", fileInfos);
    model.addAttribute("filter", "images");

    return "files";
  }

  @GetMapping("/videos/filter")
  public String getVideos(Model model) {
    List<ImageInfo> fileInfos = storageService.loadAll().filter(path -> getFileType(path).equals("video")).map(path -> {
      String filename = path.getFileName().toString();
      String url = MvcUriComponentsBuilder
          .fromMethodName(ImageController.class, "getFile", path.getFileName().toString()).build().toString();
      return new ImageInfo(filename, url, "video");
    }).collect(Collectors.toList());

    model.addAttribute("files", fileInfos);
    model.addAttribute("filter", "videos");

    return "files";
  }

  @GetMapping("/files/{filename:.+}")
  public ResponseEntity<Resource> getFile(@PathVariable String filename) {
    Resource file = storageService.load(filename);

    return ResponseEntity.ok()
        .header(HttpHeaders.CONTENT_DISPOSITION, "attachment; filename=\"" + file.getFilename() + "\"").body(file);
  }

  @DeleteMapping("/files/{filename:.+}")
  public ResponseEntity<ResponseMessage> deleteFile(@PathVariable String filename) {
      String message = "";

      try {
          // Kiểm tra xem tệp cần xóa có tồn tại không
          Resource file = storageService.load(filename);
          if (file != null && file.exists()) {
              // Xác định loại file dựa trên phần mở rộng của filename
              String fileType = getFileType(filename);
              boolean deleted = false;
              // Gọi phương thức xóa từ dịch vụ lưu trữ tương ứng
              if ("image".equals(fileType)) {
                  deleted = storageService.deleteImage(filename);
              } else if ("video".equals(fileType)) {
                  deleted = storageService.deleteVideo(filename);
              }

              if (deleted) {
                  message = "Deleted the file successfully: " + filename;
                  return ResponseEntity.status(HttpStatus.OK).body(new ResponseMessage(message));
              } else {
                  message = "Failed to delete the file: " + filename;
                  return ResponseEntity.status(HttpStatus.NOT_FOUND).body(new ResponseMessage(message));
              }
          } else {
              message = "File not found: " + filename;
              return ResponseEntity.status(HttpStatus.NOT_FOUND).body(new ResponseMessage(message));
          }
      } catch (Exception e) {
          message = "Could not delete the file: " + filename + ". Error: " + e.getMessage();
          return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(new ResponseMessage(message));
      }
  }

  @PostMapping("/directories/create")
  public String createNewFolder(@RequestParam("dirname") String dirname, RedirectAttributes redirectAttributes) {
      try {
          storageService.createDirectory(dirname);
          redirectAttributes.addFlashAttribute("message", "Created the directory successfully: " + dirname);
      } catch (Exception e) {
          redirectAttributes.addFlashAttribute("message", "Could not create the directory: " + dirname + ". Error: " + e.getMessage());
      }

      return "redirect:/images";
  }
  
  @PostMapping("/directories/delete")
  public String deleteDirectory(@RequestParam("dirname") String dirname, RedirectAttributes redirectAttributes) {
      try {
          storageService.deleteDirectory(dirname);
          redirectAttributes.addFlashAttribute("message", "Deleted the directory successfully: " + dirname);
      } catch (Exception e) {
          redirectAttributes.addFlashAttribute("message", "Could not delete the directory: " + dirname + ". Error: " + e.getMessage());
      }

      return "redirect:/images";
  }



  @GetMapping("/directories/{dirname}/files")
  public String getFilesFromDirectory(@PathVariable String dirname, Model model) {
    List<ImageInfo> fileInfos = storageService.loadAllFromDirectory(dirname).map(path -> {
      String filename = path.getFileName().toString();
      String url = MvcUriComponentsBuilder
          .fromMethodName(ImageController.class, "getFile", path.toString()).build().toString();
      String type = getFileType(path);
      return new ImageInfo(filename, url, type);
    }).collect(Collectors.toList());

    model.addAttribute("files", fileInfos);
    model.addAttribute("directory", dirname);

    return "files";
  }

  @GetMapping("/files/analyze/{filename:.+}")
  public String analyzeFile(@PathVariable String filename, Model model, RedirectAttributes redirectAttributes) {
    String analysisResult = "Analysis result for file: " + filename;

    model.addAttribute("analysisResult", analysisResult);
    return "file_analysis";
  }

  private String getFileType(Path path) {
    try {
      String contentType = Files.probeContentType(path);
      if (contentType != null) {
        if (contentType.startsWith("image")) {
          return "image";
        } else if (contentType.startsWith("video")) {
          return "video";
        }
      }
    } catch (IOException e) {
      e.printStackTrace();
    }
    return "unknown";
  }

  private String getFileType(String filename) {
    if (filename.endsWith(".jpg") || filename.endsWith(".jpeg") || filename.endsWith(".png")) {
      return "image";
    } else if (filename.endsWith(".mp4") || filename.endsWith(".avi") || filename.endsWith(".mov")) {
      return "video";
    } else {
      return "unknown";
    }
  }

  @ExceptionHandler(Exception.class)
  public String handleError(Exception ex, Model model) {
    model.addAttribute("error", ex.getMessage());
    return "error";
  }

}
